{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","start","optionDisplay","cpu","gameTurn","player1","player2","one","two","three","four","five","six","seven","eight","nine","ten","playCount","mode","addXO","bind","assertThisInitialized","setPlayerX","setPlayerO","setMode","setModeCPU","playCPU","event","_this2","id","target","_this$setState","_this$setState2","setState","defineProperty","setTimeout","checkWinner","_this$setState3","showPlayer","_this$setState4","_this3","randomID","Math","floor","random","alert","_this4","randomTurn","cpuRandomTurn","startCPU","_this5","_this6","react_default","a","createElement","onClick","class","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9b5e72e7.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      start: true,\n      optionDisplay: true,\n      cpu: \"\",\n      gameTurn: \"\",\n      player1: \"\",\n      player2: \"\",\n      one: \"\",\n      two: \"\",\n      three: \"\",\n      four: \"\",\n      five: \"\",\n      six: \"\",\n      seven: \"\",\n      eight: \"\",\n      nine: \"\",\n      ten: \"\",\n      playCount: 0,\n      mode: \"\"\n    };\n    this.addXO = this.addXO.bind(this);\n    this.setPlayerX = this.setPlayerX.bind(this);\n    this.setPlayerO = this.setPlayerO.bind(this);\n    this.setMode = this.setMode.bind(this);\n    this.setModeCPU = this.setModeCPU.bind(this);\n    this.playCPU = this.playCPU.bind(this);\n  }\n\n  addXO(event) {\n    const { id } = event.target;\n    if (this.state.mode == \"human\") {\n      if (this.state[id] == \"\") {\n        if (this.state.gameTurn == \"Player 1\") {\n          this.setState({\n            [id]: this.state.player1,\n            playCount: this.state.playCount + 1,\n            gameTurn: \"Player 2\"\n          });\n          setTimeout(() => this.checkWinner(), 1000);\n        } else {\n          this.setState({\n            [id]: this.state.player2,\n            playCount: this.state.playCount + 1,\n            gameTurn: \"Player 1\"\n          });\n          setTimeout(() => this.checkWinner(), 1000);\n        }\n      }\n    } else {\n      const { id } = event.target;\n      if (this.state[id] == \"\") {\n        if (this.state.gameTurn == \"Player 1\") {\n          this.setState({\n            [id]: this.state.player1,\n            playCount: this.state.playCount + 1,\n            gameTurn: \"Computer\"\n          });\n          this.showPlayer();\n          setTimeout(() => this.checkWinner(), 1000);\n          setTimeout(() => this.playCPU(), 2000);\n        } else {\n          setTimeout(() => this.playCPU(), 2000);\n        }\n      }\n    }\n  }\n  showPlayer() {\n    return \"Go \" + this.state.gameTurn + \"!\";\n  }\n  playCPU() {\n    let idArray = [\n      \"one\",\n      \"two\",\n      \"three\",\n      \"four\",\n      \"five\",\n      \"six\",\n      \"seven\",\n      \"eight\",\n      \"nine\"\n    ];\n    let randomID = idArray[Math.floor(Math.random() * 10)];\n    if (this.state[randomID] == \"\") {\n      if (this.state.gameTurn == \"Computer\") {\n        this.setState({\n          [randomID]: this.state.cpu,\n          playCount: this.state.playCount + 1,\n          gameTurn: \"Player 1\"\n        });\n        this.showPlayer();\n        setTimeout(() => this.checkWinner(), 1000);\n      }\n    } else {\n      this.playCPU();\n    }\n  }\n\n  checkWinner() {\n    if (\n      (this.state.one !== \"\" &&\n        this.state.one == this.state.two &&\n        this.state.two == this.state.three) ||\n      (this.state.four !== \"\" &&\n        this.state.four == this.state.five &&\n        this.state.five == this.state.six) ||\n      (this.state.seven !== \"\" &&\n        this.state.seven == this.state.eight &&\n        this.state.eight == this.state.nine) ||\n      (this.state.one !== \"\" &&\n        this.state.one !== \"\" &&\n        this.state.one == this.state.four &&\n        this.state.four == this.state.seven) ||\n      (this.state.two !== \"\" &&\n        this.state.two == this.state.five &&\n        this.state.five == this.state.eight) ||\n      (this.state.three !== \"\" &&\n        this.state.three == this.state.six &&\n        this.state.six == this.state.nine) ||\n      (this.state.one !== \"\" &&\n        this.state.one == this.state.five &&\n        this.state.five == this.state.nine) ||\n      (this.state.three !== \"\" &&\n        this.state.three == this.state.five &&\n        this.state.five == this.state.seven)\n    ) {\n      if (this.state.gameTurn == \"Computer\") {\n        alert(\"Player 1 wins!\");\n      } else if (\n        this.state.gameTurn == \"Player 1\" &&\n        this.state.mode == \"cpu\"\n      ) {\n        alert(\"Computer wins!\");\n      } else if (\n        this.state.gameTurn == \"Player 1\" &&\n        this.state.mode == \"human\"\n      ) {\n        alert(\"Player 2 wins!\");\n      } else if (this.state.gameTurn == \"Player 2\") {\n        alert(\"Player 1 wins!\");\n      }\n      this.setState({\n        one: \"\",\n        two: \"\",\n        three: \"\",\n        four: \"\",\n        five: \"\",\n        six: \"\",\n        seven: \"\",\n        eight: \"\",\n        nine: \"\",\n        ten: \"\",\n        playCount: 0\n      });\n    } else if (this.state.playCount == 9) {\n      alert(\"DRAW!\");\n      this.setState({\n        one: \"\",\n        two: \"\",\n        three: \"\",\n        four: \"\",\n        five: \"\",\n        six: \"\",\n        seven: \"\",\n        eight: \"\",\n        nine: \"\",\n        ten: \"\",\n        playCount: 0\n      });\n    }\n  }\n  setPlayerX() {\n    let turnArray = [\"Player 1\", \"Player 2\"];\n    let randomTurn = turnArray[Math.floor(Math.random() * 2)];\n    let cpuTurnArray = [\"Player 1\", \"Computer\"];\n    let cpuRandomTurn = cpuTurnArray[Math.floor(Math.random() * 2)];\n    if (this.state.mode == \"cpu\") {\n      this.setState({\n        start: false,\n        player1: \"X\",\n        cpu: \"O\",\n        optionDisplay: false,\n        gameTurn: cpuRandomTurn\n      });\n      setTimeout(() => this.startCPU(), 1000);\n      this.showPlayer();\n    } else {\n      this.setState({\n        start: false,\n        player1: \"X\",\n        player2: \"O\",\n        optionDisplay: false,\n        gameTurn: randomTurn\n      });\n    }\n  }\n  setPlayerO() {\n    let turnArray = [\"Player 1\", \"Player 2\"];\n    let randomTurn = turnArray[Math.floor(Math.random() * 2)];\n    let cpuTurnArray = [\"Player 1\", \"Computer\"];\n    let cpuRandomTurn = cpuTurnArray[Math.floor(Math.random() * 2)];\n    if (this.state.mode == \"cpu\") {\n      this.setState({\n        start: false,\n        player1: \"O\",\n        cpu: \"X\",\n        optionDisplay: false,\n        gameTurn: cpuRandomTurn\n      });\n      this.showPlayer();\n      setTimeout(() => this.startCPU(), 1000);\n    } else {\n      this.setState({\n        start: false,\n        player1: \"O\",\n        player2: \"X\",\n        optionDisplay: false,\n        gameTurn: randomTurn\n      });\n    }\n  }\n  startCPU() {\n    if (this.state.gameTurn == \"Computer\") {\n      setTimeout(() => this.playCPU(), 2000);\n    }\n  }\n  setMode() {\n    this.setState({\n      mode: \"human\",\n      start: false\n    });\n  }\n  setModeCPU() {\n    this.setState({\n      mode: \"cpu\",\n      start: false\n    });\n  }\n\n  render() {\n    return (\n      <div id=\"container\">\n        {this.state.start && (\n          <h2>\n            How do you want to play?\n            <br />\n            <button id=\"onePlayerBtn\" onClick={this.setModeCPU}>\n              One player\n            </button>\n            --\n            <button id=\"twoPlayerBtn\" onClick={this.setMode}>\n              two player?\n            </button>\n          </h2>\n        )}\n        {this.state.mode == \"human\" && this.state.optionDisplay == true && (\n          <h2>\n            Player 1, would you like to be{\" \"}\n            <button id=\"Xbutton\" onClick={this.setPlayerX}>\n              'X'\n            </button>{\" \"}\n            or{\" \"}\n            <button id=\"Obutton\" onClick={this.setPlayerO}>\n              'O?'\n            </button>\n          </h2>\n        )}\n        {this.state.mode == \"cpu\" && this.state.optionDisplay == true && (\n          <h2>\n            Would you like to be{\" \"}\n            <button id=\"Xbutton\" onClick={this.setPlayerX}>\n              'X'\n            </button>{\" \"}\n            or{\" \"}\n            <button id=\"Obutton\" onClick={this.setPlayerO}>\n              'O?'\n            </button>\n          </h2>\n        )}\n        {this.state.start == false &&\n          this.state.mode == \"human\" &&\n          this.state.player1 !== \"\" && (\n            <h3 id=\"player-text\">{this.showPlayer()}</h3>\n          )}\n        {this.state.start == false &&\n          this.state.mode == \"cpu\" &&\n          this.state.cpu !== \"\" &&\n          this.state.playCount < 9 && (\n            <h3 id=\"player-text\">{this.showPlayer()}</h3>\n          )}\n        <table>\n          <tr>\n            <td onClick={this.addXO} id=\"one\" class=\"area\">\n              {this.state.one}\n            </td>\n            <td onClick={this.addXO} id=\"two\" class=\"area\">\n              {this.state.two}\n            </td>\n            <td onClick={this.addXO} id=\"three\" class=\"area\">\n              {this.state.three}\n            </td>\n          </tr>\n          <tr>\n            <td onClick={this.addXO} id=\"four\" class=\"area\">\n              {this.state.four}\n            </td>\n            <td onClick={this.addXO} id=\"five\" class=\"area\">\n              {this.state.five}\n            </td>\n            <td onClick={this.addXO} id=\"six\" class=\"area\">\n              {this.state.six}\n            </td>\n          </tr>\n          <tr>\n            <td onClick={this.addXO} id=\"seven\" class=\"area\">\n              {this.state.seven}\n            </td>\n            <td onClick={this.addXO} id=\"eight\" class=\"area\">\n              {this.state.eight}\n            </td>\n            <td onClick={this.addXO} id=\"nine\" class=\"area\">\n              {this.state.nine}\n            </td>\n          </tr>\n        </table>\n        <h1>Tic-Tac-Toe</h1>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}